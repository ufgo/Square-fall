local monarch = require "monarch.monarch"
local transitions = require "monarch.transitions.gui"
local users_txt={}
local scores_txt={}
local G = require("scripts.global")
local ya_scores = require("scripts.yandex.ya_leaderboards")

local function loading_anim()
    local one=gui.get_node("one")
    local two=gui.get_node("two")
    local three=gui.get_node("three")

    gui.animate(one, "position.y", 120, gui.EASING_INQUAD, 0.7, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
    gui.animate(two, "position.y", 120, gui.EASING_INQUAD, 0.7,0.2, nil, gui.PLAYBACK_LOOP_PINGPONG)
    gui.animate(three, "position.y", 120, gui.EASING_INQUAD, 0.7,0.5, nil, gui.PLAYBACK_LOOP_PINGPONG)
end

function init(self)
    loading_anim()
    
    print(msg.url())
    msg.post(".", "acquire_input_focus")
    ya_scores.get_entries_handler(self)

    for i = 1, 10 do
        table.insert(users_txt, gui.get_node("login"..tostring(i)))
        table.insert(scores_txt, gui.get_node("score"..tostring(i)))
    end
    self.transition = transitions.create() -- note that no node is passed to transition.create()!
    .show_in(gui.get_node("table"), transitions.slide_in_bottom, gui.EASING_INQUAD, 1.0, 0.0)
    .show_out(gui.get_node("table"), transitions.slide_out_top, gui.EASING_INQUAD, 0.3, 0)

    .show_in(gui.get_node("play"), transitions.scale_in, gui.EASING_OUTQUAD, 0.3, 1.0)
    .show_out(gui.get_node("play"), transitions.scale_out, gui.EASING_INQUAD, 0.3, 0)
end

local function set_liderboard(result)
    pprint(result)

    for k, v in pairs(result.entries) do
        pprint(v)
        gui.set_text(users_txt[k], v.player.publicName)
        gui.set_text(scores_txt[k], v.score)
        gui.set_text(gui.get_node("num"..tostring(k)), tostring(k)..".")

        if gui.get_text(users_txt[k])=="" then
            gui.set_text(users_txt[k], "Логин скрыт")
        end
    end
    gui.set_scale(gui.get_node("loading"), vmath.vector3(0,0,0))

    gui.cancel_animation(gui.get_node("one"), "position.y")
    gui.cancel_animation(gui.get_node("two"), "position.y")
    gui.cancel_animation(gui.get_node("three"), "position.y")
end

function on_message(self, message_id, message, sender)
    self.transition.handle(message_id, message, sender)
    if message_id==hash("set_liderboard") then
        set_liderboard(G.GetLiderBoard())
    end
end

function on_input(self, action_id, action)
    if action_id == hash("touch") and action.pressed then
        local btn_play=gui.get_node("play")
        if gui.pick_node(btn_play, action.x, action.y) then 
            monarch.show(hash("game"))
        end
    end
end
