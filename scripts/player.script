local back=false
local player_speed=1
local G=require("scripts.global")
local score=0
local monarch = require "monarch.monarch"
local defsave = require("defsave.defsave")
go.property("isplayer", true)
local isLastChance=false

local function forward_animation(speed)
	go.animate(go.get_id(), "position.x", go.PLAYBACK_ONCE_FORWARD, 870, go.EASING_LINEAR, speed,0,
	function() 
		back_animation(player_speed)
		back=true
	end)
end

function back_animation(speed)
	go.animate(go.get_id(), "position.x", go.PLAYBACK_ONCE_FORWARD, 210, go.EASING_LINEAR, speed,0,
	function() 
		forward_animation(player_speed)
		back=false
	end)
end

local function last_chance()
	print("last_chance!")
	go.set_position(vmath.vector3(210,960,0))
	go.animate(go.get_id(), "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(1,1,1), go.EASING_LINEAR, 0.5,0.5)
	forward_animation(player_speed)
	G.SetGameOver(false)
	isLastChance=true
end

local function game_over()
	if not G.GetGameOver() then
		go.animate(go.get_id(), "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0,0,0), go.EASING_LINEAR, 0.5)
		go.cancel_animations(go.get_id(), "position.x")
		go.set_position(go.get_position(go.get_id()),"particles")
		particlefx.play("/particles#player_destroy")
		print("end")
		--
		G.SetGameOver(true)
		--
		if isLastChance then
			--msg.post("main:/transition#transition", "slide_in_top",{url="/game"})
			timer.delay(2, false, function()msg.post("game:/container#transition", "slide_in_top")end)
		else
			timer.delay(2, false, function()monarch.show(hash("last_chance"))end)
		end
		
		G.SetScore(score)
	end
end

local function add_score()
	score=score+1
	label.set_text("/score#label", score)
end

function init(self)
	print("player script: "..msg.url())
	G.SetGameOver(false)
	--particlefx.play("#player_destroy")
	msg.post(".", "acquire_input_focus")
	timer.delay(1, false, function()
	go.animate(go.get_id(), "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(1,1,1), go.EASING_LINEAR, 0.2)
	forward_animation(player_speed)
end
)
end

function on_input(self, action_id, action)
	if not G.GetBadDomain() and not G.GetGameOver() and action_id == hash("touch") and action.pressed then
		--Total distance is 660
		if back then
			local distance=go.get(go.get_id(), "position.x")-210
			--Процент пройденной дистанции от общей
			local perc=distance/660*100
			local speed=player_speed*(100-perc)/100
			--print(speed)
			forward_animation(speed)
			back=false
		else
			local distance=870-go.get(go.get_id(), "position.x")
			local perc=distance/660*100
			local speed=player_speed*(100-perc)/100
			--print(speed)
			back_animation(speed)
			back=true
		end
	end
end

function on_message(self, message_id, message, sender)
	-- check for the message
	if not G.GetGameOver() and message_id == hash("collision_response") then
		-- take action	
		if not go.get(msg.url(nil, message.other_id, "box"),"good") then
			print ("collided with box")
			game_over()
		elseif go.get(msg.url(nil, message.other_id, "box"),"good") then
			add_score()
		end
	end
	if message_id==hash("last_chance") then
		last_chance()
	elseif message_id==hash("game_over") then
		game_over()
	end
end
